단일 행 함수 => 단일 행을 받아 단일 행을 반환하는 함수

1. 문자 함수
1-1. Lower()/Upeer() => 소문자나 대문자로 바꿔주는 함수
1-2. Chr() => 문자로 입력할 수 없는 특수문자를 입력할 때 사용한다.
1-3 Initcap() => 첫 글자는 대문자 나머지는 소문자로 바꾸는 함수

1-4. Lpad() => Lpad(expr1, n, [expr2]) => expr1의 길이를 좌측으로 n만큼 늘린 후, 늘어난 공간을 expr2로 반복해서 채운다. expr2의 기본값은 공백이며 생략할 수 있다.
1-5. Rpad() => Rpad(expr1, n, [expr2]) => expr1의 길이를 우측으로 n만큼 늘린 후, 늘어난 공간을 expr2로 반복해서 채운다. expr2의 기본값은 공백이며 생략할 수 있다.
=> 이 함수들은 expr1이 널이면 널을 반환한다.
=> 정확한 로직은 첫 번째 매개변수의 길이와 두 번째 매개변수의 숫자를 매칭시킨다. 첫 번째 매개변수의 길이가 두 번째 매개변수 길이보다 적으면 세 번째 매개변수의 값으로 채워지는 것이다. 만약 반대라면 두 번쨰 매개변수의 숫자만큼 출력된다. 사라지는 것은 뒤에서부터이다.

1-6. Ltrim('',[set]) => 좌측부터 set에 포함된 문자를 제거한다. char는 한 문자씩 set과 비교되며, set에 포함되지 않는 문자를 만나면 제거가 중단된다. set의 기본값은 공백이다.
1-7. Rtrim('',[set]) => 우측부터 set에 포함된 문자를 제거한다. char는 한 문자씩 set과 비교되며, set에 포함되지 않는 문자를 만나면 제거가 중단된다. set의 기본값은 공백이다.
1-8. Trim(Leading or trailing or both, '', trim_source) => Leading은 앞에서 동작/Trailng은 뒤에서 동작
=> 이 함수들에 인자를 문자열만 줬을 때는 문자열만 나온다.

1-9. Substr('',n,(n)) => 문자열을 가공할 때 사용한다.

1-10. Replace('','','') => 첫 번쨰 매개변수가 대상이고 두 번쨰 매개변수는 해당되는 문자열이고 세 번째 매개변수는 바꿀 문자열이다.

-----1-11. Translate('','','') => 첫 번쨰 매개변수가 대상이고 두 번쨰 매개변수는 일치할 문자열이고 세 번째 매개변수는 바꿀 문자열이다. -----

1-12. Ascll() => char 첫 문자의 아스키 값을 십진수로 반환한다.

1-13 Instr('',n,n) => 문자열의 위치를 숫자로 반환한다.
ex) select instr('abababab','ab',1,2) from dual;
=> ab의 2번쨰 위치의 첫 글자의 위치 3
ex) select instr('hwt hwt hwt hwt','hwt ',1,3) from dual;
=> hwt의 3번쨰 위치의 첫 글자의 위치 9
ex)  select instr('lazy lazy lazy lazy lazy lazy','lazy ', 2, 2) from dual;
=> lazy 의 두 번째부터 두 번쨰 첫 글자 위치 11 
feat. 조금 이상하게 돌아간다.


1-14. Length() => 문자열의 길이를 출력하는 함수





















